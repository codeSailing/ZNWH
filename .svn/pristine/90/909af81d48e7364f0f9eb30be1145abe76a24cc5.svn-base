var callFlow = function ($,layui) {
    function init() {
        layui.use(['table','form','element','laydate'], function () {
            var table = layui.table
                , form = layui.form
                , element = layui.element
                , laydate = layui.laydate

            var editData;
            laydate.render({
                elem: '#date'
            });
            //展示已知数据
            table.render({
                elem: '#content-flow'
                , url: context + "/callFlow/data.do" //数据接口
                , page: true //是否显示分页
                , skin: 'row'//表格风格
                , even: true //开启隔行背景
                , id: 'callFlow' //初始化标识id
                , cols: [[ //标题栏
                    {checkbox: true, field: 'id', title: '全选'}
                    , {field: 'name', title: '流程名称', width: 180,}
                    , {field: 'descri', title: '流程描述', minWidth: 300}
                    , {field: 'updateUser', title: '更新人员', minWidth: 140}
                    , {field: 'updateTime', title: '更新时间',templet:'<div>{{layui.laytpl.toDateString(d.updateTime,"yyyy-MM-dd HH:mm")}}</div>', minWidth: 140}
                    , {field: 'right', title: '操作', width: 180, align: 'center', toolbar: '#bar-flow'}
                ]]
                , id: 'callFlow' //初始化标识id
                // , data: [{}]

            });
            // laypage.render({
            //     elem: 'page-flow' //注意，这里的 test1 是 ID，不用加 # 号
            //     , count: 15 //数据总数，从服务端得到
            //     , layout: ['count', 'prev', 'page', 'next', 'refresh', 'skip']
            //     , jump: function (obj) {
            //         console.log(obj)
            //     }
            // });

            /************************监听每行按钮事件****************************/
            table.on('tool(contentList)', function (obj) {
                var data = obj.data; //获得当前行数据
                var layEvent = obj.event; //获得 lay-event 对应的值
                if (layEvent == "delete") { //删除
                    layer.confirm("删除后无法恢复，确定删除吗？", {
                        btn: ["确定", "取消"],
                        btn1: function () {
                            $.ajax({
                                type: "get",
                                url: context + "/callFlow/delete.do",
                                data: {"ids": data.id},
                                success: function (data) {
                                    if (data.status == 0) {
                                        layer.msg(data.message, {time: 2000, icon: 1});
                                        reloadTable();
                                    } else {
                                        layer.msg(data.message, {time: 2000, icon: 5});
                                    }
                                },
                                error: function (data) {
                                    layer.msg("删除失败", {time: 2000, icon: 5});
                                }
                            });
                        }
                    });
                } else if (layEvent == "edit") { //修改
                    editData = data;
                    $("#updateFlow").find("[name='updateId']").val(data.id);
                    $("#updateFlow").find("[name='updateName']").val(data.name);
                    $("#updateFlow").find("[name='updateDescri']").val(data.descri);
                    $("#updateFlow").find("[name='updateResourcePath']").val(data.resourcePath);
                    $("#updateFlow").modal("show");
                }
            });


            if (window.goSamples) goSamples();  // 这些样本的init - 你不需要调用它
            var $$ = go.GraphObject.make;  // 为了简洁定义模板
            myDiagram =
                $$(go.Diagram, "myDiagramDiv",  // 必须命名或引用div HTML元素
                    {
                        // grid: $$(go.Panel, "Grid",
                        //     $$(go.Shape, "LineH", {stroke: "lightgray", strokeWidth: 0.5}),
                        //     $$(go.Shape, "LineH", {stroke: "gray", strokeWidth: 0.5, interval: 10}),
                        //     $$(go.Shape, "LineV", {stroke: "lightgray", strokeWidth: 0.5}),
                        //     $$(go.Shape, "LineV", {stroke: "gray", strokeWidth: 0.5, interval: 10})
                        // ),
                        allowDrop: true,  // 必须是真的才能接受调色板中的液滴
                        "draggingTool.dragsLink": true,
                        "draggingTool.isGridSnapEnabled": true,
                        "linkingTool.isUnconnectedLinkValid": true,
                        "linkingTool.portGravity": 20,
                        "relinkingTool.isUnconnectedLinkValid": true,
                        "relinkingTool.portGravity": 20,
                        "relinkingTool.fromHandleArchetype":
                            $$(go.Shape, "Diamond", {
                                segmentIndex: 0,
                                cursor: "pointer",
                                desiredSize: new go.Size(8, 8),
                                fill: "tomato",
                                stroke: "darkred"
                            }),
                        "relinkingTool.toHandleArchetype":
                            $$(go.Shape, "Diamond", {
                                segmentIndex: -1,
                                cursor: "pointer",
                                desiredSize: new go.Size(8, 8),
                                fill: "darkred",
                                stroke: "tomato"
                            }),
                        "linkReshapingTool.handleArchetype":
                            $$(go.Shape, "Diamond", {
                                desiredSize: new go.Size(7, 7),
                                fill: "lightblue",
                                stroke: "deepskyblue"
                            }),
                        rotatingTool: $$(TopRotatingTool),  // 定义如下
                        "rotatingTool.snapAngleMultiple": 15,
                        "rotatingTool.snapAngleEpsilon": 15,
                        "undoManager.isEnabled": true
                    });
            // 当文档被修改时，为标题添加一个“*”并启用“保存”按钮
            myDiagram.addDiagramListener("Modified", function (e) {
                var button = document.getElementById("SaveButton");
                // if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf("*");
                if (myDiagram.isModified) {
                    if (idx < 0) document.title += "*";
                } else {
                    if (idx >= 0) document.title = document.title.substr(0, idx);
                }
            });
            var Select_Port = null;
            myDiagram.addDiagramListener("ObjectSingleClicked", function(e) {
                Select_Port = e.subject.part.data;
                // console.log(e.diagram.commandHandler);
                // alert(e.subject.part.data.res);

                // e.subject.part.data即获取到的data
                // alert(e.subject.part.data.key);
                // $("#res").val(e.subject.part.data.key);
                // $$('html').html(e.subject.part.data.key);
                $('#res').val(e.subject.part.data.key);
                // console.log(e.subject.part.data);
                // e.subject.part.data.id = 2;


                // myDiagram.model.removeNodeData(Select_Port);

            });

            // 定义一个创建通常透明的“端口”的函数。
            //“name”用作GraphObject.portId，“spot”用于控制链接的连接方式
            // 以及端口在节点上的位置以及布尔型“输出”和“输入”参数
            // 控制用户是否可以从端口或从端口获取链接。
            function makePort(name, spot, output, input) {
                // 港口基本上只是一个小透明的广场
                return $$(go.Shape, "Circle",
                    {
                        fill: null,  // 没有看到，默认情况下; 通过showSmallPorts设置为半透明灰色，如下定义
                        stroke: null,
                        desiredSize: new go.Size(7, 7),
                        alignment: spot,  // 对齐主Shape中的端口
                        alignmentFocus: spot,  // 只是在形状内
                        portId: name,  // 声明这个对象是一个“端口”
                        fromSpot: spot, toSpot: spot,  // 声明链接可能在此端口连接的位置
                        fromLinkable: output, toLinkable: input,  // 声明用户是否可以在此处绘制链接
                        cursor: "pointer"  // 显示不同的光标以指示潜在的链接点
                    });
            }
            $('#deletePart').click(function(e){
                var content = $('#content').val();
                var exceptionRef = $('#exceptionRef').val();
                var id = $('#id').val();
                var answer = $('#answer').val();
                var defaultRef = $('#defaultRef').val();
                var exceptionRef = $('#exceptionRef').val();
                if("undefined" == typeof myDiagram){
                    result_prompt(0, "浏览器不兼容此功能，请使用高版本谷歌浏览器！");
                    return false;
                }
                console.log(Select_Port);
                if (Select_Port == null) {
                    alert("请先选中节点！");
                }
                Select_Port.id = id;
                Select_Port.answer = answer;
                Select_Port.defaultRef = defaultRef;
                Select_Port.exceptionRef = exceptionRef;
                Select_Port.content = content;
                //  var node = obj.part;//拿到节点的对象，后面要拿什么值就直接.出来
                // myDiagram.model.removeNodeData(Select_Port);
            });

            $('#undo-buttun').click(function(){
                if("undefined" == typeof myDiagram){
                    result_prompt(0, "浏览器不兼容此功能，请使用高版本谷歌浏览器！");
                    return false;
                }
                myDiagram.undoManager.undo();
            });

            $('#redo-buttun').click(function(){
                if("undefined" == typeof myDiagram){
                    result_prompt(0, "浏览器不兼容此功能，请使用高版本谷歌浏览器！");
                    return false;
                }
                myDiagram.undoManager.redo();
            });
            var nodeSelectionAdornmentTemplate =
                $$(go.Adornment, "Auto",
                    $$(go.Shape, {fill: null, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2]}),
                    $$(go.Placeholder)
                );
            var nodeResizeAdornmentTemplate =
                $$(go.Adornment, "Spot",
                    {locationSpot: go.Spot.Right},
                    $$(go.Placeholder),
                    $$(go.Shape, {
                        alignment: go.Spot.TopLeft,
                        cursor: "nw-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.Top,
                        cursor: "n-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.TopRight,
                        cursor: "ne-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.Left,
                        cursor: "w-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.Right,
                        cursor: "e-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.BottomLeft,
                        cursor: "se-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.Bottom,
                        cursor: "s-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        alignment: go.Spot.BottomRight,
                        cursor: "sw-resize",
                        desiredSize: new go.Size(6, 6),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    })
                );
            var nodeRotateAdornmentTemplate =
                $$(go.Adornment,
                    {locationSpot: go.Spot.Center, locationObjectName: "CIRCLE"},
                    $$(go.Shape, "Circle", {
                        name: "CIRCLE",
                        cursor: "pointer",
                        desiredSize: new go.Size(7, 7),
                        fill: "lightblue",
                        stroke: "deepskyblue"
                    }),
                    $$(go.Shape, {
                        geometryString: "M3.5 7 L3.5 30",
                        isGeometryPositioned: true,
                        stroke: "deepskyblue",
                        strokeWidth: 1.5,
                        strokeDashArray: [4, 2]
                    })
                );
            myDiagram.nodeTemplate =
                $$(go.Node, "Spot",
                    {locationSpot: go.Spot.Center},
                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                    {selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate},
                    {resizable: true, resizeObjectName: "PANEL", resizeAdornmentTemplate: nodeResizeAdornmentTemplate},
                    {rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate},
                    new go.Binding("angle").makeTwoWay(),
                    //主要对象是围绕具有形状的TextBlock的面板
                    $$(go.Panel, "Auto",
                        {name: "PANEL"},
                        new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
                        $$(go.Shape, "Rectangle",  // 默认数字
                            {
                                portId: "", // 默认端口：如果链接数据没有位置，请使用最近端
                                fromLinkable: true, toLinkable: true, cursor: "pointer",
                                fill: "white",  // default color
                                strokeWidth: 2
                            },
                            new go.Binding("figure"),
                            new go.Binding("fill")),
                        $$(go.TextBlock,
                            {
                                font: "bold 11pt sans-serif, Arial, sans-serif",
                                margin: 8,
                                stroke: "white",
                                maxSize: new go.Size(160, NaN),
                                wrap: go.TextBlock.WrapFit,
                                editable: true
                            },
                            new go.Binding("text").makeTwoWay())
                    ),
                    // 四个小的有名港口，每边一个：
                    makePort("T", go.Spot.Top, false, true),
                    makePort("L", go.Spot.Left, true, true),
                    makePort("R", go.Spot.Right, true, true),
                    makePort("B", go.Spot.Bottom, true, false),
                    { // 处理鼠标进入/离开事件以显示/隐藏端口
                        mouseEnter: function (e, node) {
                            showSmallPorts(node, true);
                        },
                        mouseLeave: function (e, node) {
                            showSmallPorts(node, false);
                        }
                    }
                );


            function showSmallPorts(node, show) {
                node.ports.each(function (port) {
                    if (port.portId !== "") {  // 不要更改默认端口，这是一个很大的形状
                        port.fill = show ? "rgba(0,0,0,.3)" : null;
                    }
                });
            }
            var linkSelectionAdornmentTemplate =
                $$(go.Adornment, "Link",
                    $$(go.Shape,
                        // isPanelMain声明这个Shape共享Link.geometry
                        {isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0})  // 使用选择对象的strokeWidth
                );
            myDiagram.linkTemplate =
                $$(go.Link,  // 整个链接面板
                    {selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate},
                    {relinkableFrom: true, relinkableTo: true, reshapable: true},
                    {
                        routing: go.Link.AvoidsNodes,
                        curve: go.Link.JumpOver,
                        corner: 5,
                        toShortLength: 4
                    },
                    new go.Binding("points").makeTwoWay(),
                    $$(go.Shape,  // the link path shape
                        {isPanelMain: true, strokeWidth: 2}),
                    $$(go.Shape,  // the arrowhead
                        {toArrow: "Standard", stroke: null}),
                    $$(go.Panel, "Auto",
                        new go.Binding("visible", "isSelected").ofObject(),
                        $$(go.Shape, "RoundedRectangle",  // 链接形状
                            {fill: "#F8F8F8", stroke: null}),
                        $$(go.TextBlock,
                            {
                                textAlign: "center",
                                font: "10pt helvetica, arial, sans-serif",
                                stroke: "#919191",
                                margin: 2,
                                minSize: new go.Size(10, NaN),
                                editable: true
                            },
                            new go.Binding("text").makeTwoWay())
                    )
                );
            load();  // 从一些JSON文本加载初始图
            // 初始化页面左侧的Palette
            myPalette =
                $$(go.Palette, "myPaletteDiv",  // 必须命名或引用DIV HTML元素
                    {
                        maxSelectionCount: 1,
                        nodeTemplateMap: myDiagram.nodeTemplateMap,  // 共享myDiagram使用的模板
                        linkTemplate: // 简化链接模板，就在这个调色板中
                            $$(go.Link,
                                { // 因为GridLayout.alignment是Location，并且节点具有locationSpot == Spot.Center，
                                    // 以相同的方式排列链接，我们必须假装链接具有相同的位置点
                                    locationSpot: go.Spot.Center,
                                    selectionAdornmentTemplate:
                                        $$(go.Adornment, "Link",
                                            {locationSpot: go.Spot.Center},
                                            $$(go.Shape,
                                                {isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0}),
                                            $$(go.Shape,  // the arrowhead
                                                {toArrow: "Standard", stroke: null})
                                        )
                                },
                                {
                                    routing: go.Link.AvoidsNodes,
                                    curve: go.Link.JumpOver,
                                    corner: 5,
                                    toShortLength: 4
                                },
                                new go.Binding("points"),
                                $$(go.Shape,  // 链接路径形状
                                    {isPanelMain: true, strokeWidth: 2}),
                                $$(go.Shape,  // 箭头
                                    {toArrow: "Standard", stroke: null})
                            ),
                        model: new go.GraphLinksModel([  // 指定调色板的内容
                            //{text: "模块内容", figure: "形状", fill: "颜色"},值可以接受变量
                            {text: "开始",figure: "RoundedRectangle",fill:"#66C99C",start:"1",id:"",answer:"",defaultRef:"",exceptionRef:"",content:""},
                            {text: "节点",fill:"#49A7C5",id:"",answer:"",defaultRef:"",exceptionRef:"",content:""},
                            {text: "判断",fill:"#7270AC", figure: "Diamond",id:"",answer:"",defaultRef:"",exceptionRef:"",content:""},
                            {text: "结束",fill:"red", figure: "RoundedRectangle",id:"",answer:"",defaultRef:"",exceptionRef:"",content:""}
                        ], [
                            // 调色板也有一个断开的链接，用户可以拖放
                            {points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)])}
                        ])
                    });


            //gooFLow插件
            // var property={
            //     width:800,
            //     height:500,
            //     toolBtns:["start round","end","task","node","chat","state","plug","join","fork","complex mix"],
            //     haveHead:true,
            //     headBtns:["new","open","save","undo","redo","reload"],//如果haveHead=true，则定义HEAD区的按钮
            //     haveTool:true,
            //     haveGroup:true,
            //     useOperStack:true
            // };
            // var remark={
            //     cursor:"选择指针",
            //     direct:"结点连线",
            //     start:"入口结点",
            //     "end":"结束结点",
            //     "task":"任务结点",
            //     node:"自动结点",
            //     chat:"决策结点",
            //     state:"状态结点",
            //     plug:"附加插件",
            //     fork:"分支结点",
            //     "join":"联合结点",
            //     "complex mix":"复合结点",
            //     group:"组织划分框编辑开关"
            // };
            // var demo;
            // $(document).ready(function(){
            //     demo=$.createGooFlow($("#flow-content"),property);
            //     demo.setNodeRemarks(remark);
            //     // demo.onItemDel=function(id,type){
            //     //   if(confirm("确定要删除该单元吗?")){
            //     //      this.blurItem();
            //     //      return true;
            //     //   }else{
            //     //      return false;
            //     //   }
            //     // }
            //     demo.loadData(jsondata);
            //     // console.log(jsondata);
            //     demo.onItemFocus=function(id,model){
            //         // var obj;
            //         $("#node_id").val("");
            //         $("#node_sourceRef").val("");
            //         $("#node_answer").val("");
            //         $("#node_targetRef").val("");
            //         $("#node_defaultRef").val("");
            //         $("#node_exceptionRef").val("");
            //         $("#node_content").val("");
            //         return true;
            //     };
            //
            //     demo.onItemBlur=function(id,model){
            //         document.getElementById("propertyForm").reset();
            //         return true;
            //     };
            // });
            // var out;
            // Export = function (){
            //     document.getElementById("result").value=JSON.stringify(demo.exportData());
            // }
            // $(function (){
            //     $.fn.serializeObject = function(){
            //         var o = {};
            //         var a = this.serializeArray();
            //         $.each(a, function() {
            //             if (o[this.name] !== undefined) {
            //                 if (!o[this.name].push) {
            //                     o[this.name] = [o[this.name]];
            //                 }
            //                 o[this.name].push(this.value || '');
            //             } else {
            //                 o[this.name] = this.value || '';
            //             }
            //         });
            //         return o;
            //     }
            //     $("#fun1").click(function (){
            //         var data = {};
            //         $("#propertyForm").serializeArray().map(function(x){
            //             if (data[x.name] !== undefined) {
            //                 if (!data[x.name].push) {
            //                     data[x.name] = [data[x.name]];
            //                 }
            //                 data[x.name].push(x.value || '');
            //             } else {
            //                 data[x.name] = x.value || '';
            //             }
            //         });
            //         $(".item_focus input").val(JSON.stringify(data));
            //         layer.msg("请填写下一个节点信息，若已经填写完成请保存！");
            //     });
            // });
            //gojs流程图
            var reloadTable = function () {
                table.reload("callFlow", { //此处是上文提到的 初始化标识id
                });
            };
            test = function (){
                // var title = $('.GooFlow_head label').text();
                var node = $('.GooFlow_item input');
                // var nodeLen = $('.GooFlow_item input').val();
                var name = $('#flowName').val();
                var content = $('#flowContent').val();
                var nodeArr = [];
                // for (var i = 0;i<node.length;i++) {
                //     nodeArr.push(JSON.parse(node.eq(i).val()));
                // }
                // var obj={
                //     "@id":"process1",
                //     "@name": "精神病人回访",
                //     "node":nodeArr
                // };
                // console.log(obj);
                // var newNodeArr = [];
                // newNodeArr.push(obj);
                // console.log(newNodeArr);
                // var nodeObj = JSON.stringify(newNodeArr);
                var nodeObj = $('#mySavedModel').val();
                $.ajax({
                    type: "post",
                    url: context + "/callFlow/add.do",
                    data: {"callFlowInfo": nodeObj,"title":name,"descri":content},
                    success:function (data) {
                        console.log(data);
                        reloadTable();
                        $('.flow-wrap').css('display','none');
                        $('.flowForm').css('display','block');
                    }
                });
            };
            closeFlow = function () {
                $('.flow-wrap').css('display','none');
                $('.flowForm').css('display','block');
            }
            save = function () {
                saveDiagramProperties();  // 在写入JSON之前先执行此操作
                document.getElementById("mySavedModel").value = myDiagram.model.toJson();
                // myDiagram.isModified = false;
            }

            // function setAjaxParam(event) {
            //     var $form = $(event.target).parents(".search-form");
            //     var params = $form.serializeArray();
            //     $.each(params, function (key, value) {
            //         if (textReplace.test(value.value.trim())) {
            //             parent.layer.msg("搜索字段不能包含特殊字符", {
            //                 time: 2000, //2s后自动关闭
            //                 icon: 5
            //             });
            //             return false;
            //         }
            //         ajaxParams[value.name] = value.value.trim();
            //     });
            //     params = $("#moreQueryForm").serializeArray();
            //     $.each(params, function (key, value) {
            //         ajaxParams[value.name] = value.value.trim();
            //     });
            // }
            //
            // function clearAjaxParams() {
            //     ajaxParams = {};
            // }

            /************************查询****************************/
            $('.btn-search').on('click', function (event) {
                // clearAjaxParams();
                // setAjaxParam(event);
                var ajaxParams = {searchParams:$("#searchParams").val()};
                table.reload('callFlow', {
                    page: {
                        curr: 1 //重新从第 1 页开始
                    }
                    , where: {
                        key: ajaxParams
                    }
                });
            });
            /************************刷新table****************************/
            var reloadTable = function () {
                table.reload("callFlow", { //此处是上文提到的 初始化标识id
                });
            };

            /************************修改内容****************************/
            $("#commitUpdate").on("click", function () {
                var updateName = $("input[name='updateName']").val();
                var updateDescri = $("textarea[name='updateDescri']").val();
                var updateId = $("input[name='updateId']").val();
                if(updateName==null || updateName==""){
                    layer.msg("请输入流程名称！", {time: 2000, icon: 5});
                    return false;
                }

                $.ajax({
                    type: "POST",
                    url: context + "/callFlow/update.do",
                    data: {id:updateId,name:updateName,descri:updateDescri},
                    success: function (data) {
                        if (data.status == 0) {
                            $("#updateFlow").modal("hide");
                            layer.msg(data.message, {time: 2000, icon: 1});
                            reloadTable();
                        } else {
                            layer.msg(data.message, {time: 2000, icon: 5});
                        }
                    },
                    error: function (data) {
                        layer.msg("修改失败", {time: 2000, icon: 5});
                    }
                });
            });
            //新增获取xml资源文件
            // $("#addFlow").click(function () {
            //     $.ajax({
            //         url:context + "/callFlow/getXmlPath.do",
            //         type:'get',
            //         async:false,
            //         success:function (data) {
            //             if(data.status == 0){
            //                 var tpl_source1 = $("#resourcePath_handlebars").html();
            //                 var operate1 = Handlebars.compile(tpl_source1);
            //                 var html1 = operate1(data.data);
            //                 $("#resourcePath").html(html1);
            //                 form.render('radio');
            //             }
            //         },
            //         error:function () {
            //             alert("获取资源文件信息失败！");
            //         }
            //     });
            // });
            $('#addFlow').click(function () {
                // alert(1111);
                // $('.flow-wrap').css('display','block');
                // $('.flowForm').css('display','none');
                $('#add-callFlow').modal('show');
            });

            //添加提交
            $(".file").bind("change",function(){
                var fileType = $(this).val().substring($(this).val().lastIndexOf(".") + 1);
                if(fileType != "xls" &&　fileType != "xlsx"){
                    layer.msg("只能上传excel文件", {time: 2000, icon: 5});
                    return false;
                }
            });
            $("#add-submit").click(function () {
                var title = $(" input[ name='name' ] ").val();
                var fileName = $(".file").val();
                if(title==null || title==""){
                    layer.msg("请输入流程名称！", {time: 2000, icon: 5});
                    return false;
                }
                var descri = $(" textarea[ name='descri' ] ").val();
                if(fileName==null || fileName==""){
                    layer.msg("请选择文件！", {time: 2000, icon: 5});
                    return false;
                }
                var fileType = fileName.substring(fileName.lastIndexOf(".") + 1);
                if(fileType != "xls" &&　fileType != "xlsx"){
                    layer.msg("只能上传excel文件", {time: 2000, icon: 5});
                    return false;
                }
                var form = $("form[name=fileForm]");
                var options = {
                    url:context + "/callFlow/add.do", //上传文件的路径
                    type:'post',
                    data:{
                        callFlowInfo:'',
                        title:title,
                        descri:descri
                    },
                    success:function(data){
                        layer.msg("新建成功！", {time: 2000, icon: 1});
                        $('#add-callFlow').modal('hide');
                        window.location.reload()
                        // reloadTable();
                    }
                };
                form.ajaxSubmit(options);
                // var resourcePath = $("input[type='radio']:checked").val();
                // if(name==null || name==""){
                //     layer.msg("请输入流程名称！", {time: 2000, icon: 5});
                //     return false;
                // }
                // // if(resourcePath==null || resourcePath==""){
                // //     layer.msg("请选择资源文件！", {time: 2000, icon: 5});
                // //     return false;
                // // }
                // $('#add-callFlow').submit();
                // $.ajax({
                //     type: "post",
                //     url: context + "/callFlow/add.do",
                //     data: {"callFlowInfo": "","title":"","descri":""},
                //     success:function (data) {
                //         console.log(data);
                //     }
                // });
                // $.ajax({
                //     url:context + "/callFlow/add.do",
                //     data:{name:name,descri:descri,resourcePath:resourcePath},
                //     type:'post',
                //     success:function (data) {
                //         if(data.status == 0){
                //             layer.msg(data.message, {time: 2000, icon: 1});
                //             $("#add-callFlow").modal("hide");
                //             reloadTable();
                //         } else {
                //             layer.msg(data.message, {time: 2000, icon: 5});
                //         }
                //     },
                //     error:function () {
                //         layer.msg("添加失败", {time: 2000, icon: 5});
                //     }
                // });
            });
            /************************批量删除内容模态框****************************/
            $("#deleteMany").on("click", function () {
                var checkStatus = table.checkStatus('callFlow'),
                    data = checkStatus.data;//获取选中的数据
                if (data.length == 0) {
                    layer.msg("请选择数据！", {time: 1000, icon: 5});
                    return;
                }
                $("#del").modal("show");
            });

            $('#resetUpdate').click(function () {
                var data = editData;
                $("#updateFlow").find("[name='updateId']").val(data.id);
                $("#updateFlow").find("[name='updateName']").val(data.name);
                $("#updateFlow").find("[name='updateDescri']").val(data.descri);
                $("#updateFlow").find("[name='updateResourcePath']").val(data.resourcePath);
            });

            /************************批量删除内容****************************/
            $("#commitDelete").on("click", function () {
                var checkStatus = table.checkStatus('callFlow'),
                    data = checkStatus.data;//获取选中的数据
                var ids = "";
                for (var i in data) {
                    ids += data[i].id + ",";
                }
                console.log(ids)
                $.ajax({
                    type: "GET",
                    url: context + "/callFlow/delete.do",
                    data: {"ids": ids},
                    success: function (data) {
                        if (data.status == 0) {
                            $("#del").modal("hide");
                            layer.msg(data.message, {time: 2000, icon: 1});
                            reloadTable();
                        } else {
                            layer.msg(data.message, {time: 2000, icon: 5});
                        }
                    },
                    error: function (data) {
                        layer.msg("删除失败", {time: 2000, icon: 5});
                    }
                });
            });



        });
    }











    function TopRotatingTool() {
        go.RotatingTool.call(this);
    }

    go.Diagram.inherit(TopRotatingTool, go.RotatingTool);
    /** @override */
    TopRotatingTool.prototype.updateAdornments = function (part) {
        go.RotatingTool.prototype.updateAdornments.call(this, part);
        var adornment = part.findAdornment("Rotating");
        if (adornment !== null) {
            adornment.location = part.rotateObject.getDocumentPoint(new go.Spot(0.5, 0, 0, -30));  // 在中间顶部以上
        }
    };
    /** @override */
    TopRotatingTool.prototype.rotate = function (newangle) {
        go.RotatingTool.prototype.rotate.call(this, newangle + 90);
    };
    // TopRotatingTool类的结尾
    // 以JSON格式显示用户可编辑的图表模型


    load = function () {
        myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
        loadDiagramProperties();  // 在Model.modelData被带入内存后执行此操作
    }

    function saveDiagramProperties() {
        myDiagram.model.modelData.position = go.Point.stringify(myDiagram.position);
    }

    function loadDiagramProperties(e) {
        // 设置Diagram.initialPosition而不是Diagram.position，以处理初始化副作用
        var pos = myDiagram.model.modelData.position;
        if (pos) myDiagram.initialPosition = go.Point.parse(pos);
    }
    return {
        init: function () {
            init();
        }
    }
}(jQuery, layui, document);