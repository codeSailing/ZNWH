package com.quickdone.znwh.service.impl;

import com.quickdone.znwh.dao.CustomerGroupRepository;
import com.quickdone.znwh.entity.CallContent;
import com.quickdone.znwh.entity.CustomerGroup;
import com.quickdone.znwh.pojo.PaginationMapLayui;
import com.quickdone.znwh.pojo.ResponseData;
import com.quickdone.znwh.service.CustomerGroupService;
import com.quickdone.znwh.utils.ToClass;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.persistence.criteria.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @Auther: Hot-jun
 * @Date: 2018/7/10
 * @Description:
 */
@Service
@Transactional
public class CustomerGroupServiceImpl implements CustomerGroupService<CustomerGroup,Long> {

    @Resource
    private CustomerGroupRepository customerGroupRepository;

    @Override
    public CustomerGroup findById(Long id) {
        return customerGroupRepository.findById(id);
    }

    @Override
    public List<CustomerGroup> findAll(){
        return customerGroupRepository.findAll();
    }

    @Override
    public CustomerGroup addCustomerGroup(CustomerGroup customerGroup){
        return customerGroupRepository.save(customerGroup);
    }

    @Override
    public ResponseData delCustomerGroup(CustomerGroup customerGroup){
        customerGroupRepository.delete(customerGroup);
        return ResponseData.getSuccessResponse("删除成功");
    }

    @Override
    public void pageCustomerGroup(final Map<String, Object> searchParams, PaginationMapLayui pagination) {
        Pageable pageable = new PageRequest(pagination.getStart(), pagination.getLength(), new Sort(Sort.Direction.DESC, "updateTime"));
        Page<CustomerGroup> page = customerGroupRepository.findAll(new Specification<CustomerGroup>() {
            @Override
            public Predicate toPredicate(Root<CustomerGroup> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder cb) {
                List<Predicate> predicates = new ArrayList<Predicate>();
                Path<String> name = root.get("name");
                if (searchParams.containsKey("searchParam")) {
                    Predicate p = cb.like(name, "%" + searchParams.get("searchParam") + "%");
                    predicates.add(p);
                }
                Predicate[] p = new Predicate[predicates.size()];
                return cb.and(predicates.toArray(p));
            }
        }, pageable);
        List<CustomerGroup> contentList = page.getContent();
        List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>();
        for (CustomerGroup customerGroup : contentList) {
            Map<String, Object> map = ToClass.beanToMap(customerGroup);
            mapList.add(map);
        }
        pagination.setData(mapList);
        pagination.setRecordsTotal(page.getTotalElements());
    }
}
