package com.quickdone.znwh.taskhandle;

import com.quickdone.znwh.common.Constants;
import com.quickdone.znwh.controller.LoginController;
import com.quickdone.znwh.controller.api.IVRController;
import com.quickdone.znwh.pojo.ProcessNode;
import com.quickdone.znwh.utils.StringUtils;
import com.quickdone.znwh.utils.Xml2JsonUtil;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @Auther: psf
 * @Date: 2018/7/10 15:03
 * @Description:
 */

@Component
public class TaskSchedule {
    private static Logger logger = LoggerFactory.getLogger(TaskSchedule.class);

    @Value("${flow.file.path}")
    private String flowpath;
    @Resource
    private IVRController ivr;

    private static List<ProcessNode> nodeList = new ArrayList<ProcessNode>();//流程节点


    /**
     * 任务执行通用类
     * 执行步骤：
     * 1、触发外呼任务
     * 2、调用IVR接口，将一个或多个客户信息（电话号码）提交给IVR（开发阶段跳转到一个测试页面）
     * 3、IVR拨通电话后回调外呼系统（第一次拨通电话的回调需要带一个标识参数）
     * 4、外呼系统接收到请求后开始解析本次任务的流程配置文件，将第一个节点的内容发送给IVR
     * 5、IVR系统将客户的应答状况反馈给外呼系统（测试页面）
     * 6、外呼系统调用语义模块，得到标准答案，外呼系统根据标准答案决定下一步的流程
     */
    public Map<String, Object> executeTask(String currentNode, Map<String, Object> params, int taskid) throws IOException {
        String answer = (String) params.get("content");
        logger.info("本次流程节点的id是：" + currentNode + "  客户语音的语义结果是：" + answer + "   任务id是:" + taskid);
        String type = (String) params.get("type");
        Map<String, Object> result = new HashMap<String, Object>();
        switch (type) {
            case Constants.IntelligentCallStatus.NORMAL:
                logger.info("進入正常流程=============");

                break;
            case Constants.IntelligentCallStatus.CHAT:
                logger.info("進入閑聊流程=============");
                ProcessNode processNode = getNodeById(currentNode);
                answer = answer + "," + processNode.getContent();
                //拿到闲聊的内容
                currentNode = String.valueOf(Integer.parseInt(currentNode) - 1);
                result.put("nodesize", nodeList.size());
                result.put("content", answer);
                result.put("currentnode", currentNode);

                return result;


            case Constants.IntelligentCallStatus.NOTHEARING:
                logger.info("進入沒聽清流程=============");
                currentNode = String.valueOf(Integer.parseInt(currentNode) - 1);
                //返回上一个节点的流程
                result.put("currentnode", currentNode);
                break;
            case Constants.IntelligentCallStatus.USERBUSY:
                logger.info("進入挂斷流程=============");
                ProcessNode processNode1 = getNodeById(currentNode);
                String exception = processNode1.getExceptionRef();
                result.put("nodesize", nodeList.size());
                result.put("content", getNodeById(exception).getContent());
                result.put("currentnode", String.valueOf(Integer.valueOf(getNodeById(exception).getId()) - 1));
                return result;
            case Constants.IntelligentCallStatus.NORESULT:
                logger.info("進入无语义结果流程=========");
                break;
            default:
                logger.info("進入正常流程=============");
                //外呼系统读取流程配置文件，按照语义结果匹配下一节点，并将节点内容发送给IVR系统
                //TODO 根据taskid找到callTask，再找到callFlow ，查到对应流程配置文件的路径
                //String path = "D:\\精神病病人回访流程配置.xml";
                String path=flowpath;
                nodeList = new ArrayList<ProcessNode>();
                loadNodeList(path);
                /**
                 * 如果当前节点大于等于1  则需要根据nodeid和answer 匹配下一个节点并且输出节点内容
                 * 如果当前节点小于1 则直接输出第一个节点的内容
                 */

                ProcessNode pnode = getNodeByIdAndAnswer(currentNode, answer);
                String start = pnode.getContent();
                logger.info("下一节点内容是" + start);
                result.put("nodesize", nodeList.size());
                result.put("content", start);
                return result;

        }

        //外呼系统读取流程配置文件，按照语义结果匹配下一节点，并将节点内容发送给IVR系统
        //TODO 根据taskid找到callTask，再找到callFlow ，查到对应流程配置文件的路径
        //String processPath = "D:\\精神病病人回访流程配置.xml";
        String processPath=flowpath;
        nodeList = new ArrayList<ProcessNode>();
        loadNodeList(processPath);
        /**
         * 如果当前节点大于等于1  则需要根据nodeid和answer 匹配下一个节点并且输出节点内容
         * 如果当前节点小于1 则直接输出第一个节点的内容
         */

        ProcessNode node = getNodeByIdAndAnswer(currentNode, answer);

        if (node == null) {
            logger.error("未找到对应节点");
            String proid = getNodeById(currentNode).getDefaultRef();
            result.put("nodesize", nodeList.size());
            result.put("content", getNodeById(proid).getContent());
        } else {
            String startSpeak = node.getContent();
            logger.info("下一节点内容是" + startSpeak);
            result.put("nodesize", nodeList.size());
            result.put("content", startSpeak);
        }

        return result;


        //循环到下一个流程

    }


    private static void loadNodeList(String processPath) throws IOException {
        String json = Xml2JsonUtil.xml2json(processPath);
        logger.info("流程文件解析结果:" + json);
        JSONArray myJsonArray = JSONArray.fromObject(json);
        JSONObject obj = (JSONObject) myJsonArray.get(0);
        JSONArray nodeArray = JSONArray.fromObject(obj.get("node"));
        int size = nodeArray.size();
        if (size > 0) {
            for (int i = 0; i < size; i++) {
                JSONObject job = nodeArray.getJSONObject(i);
                ProcessNode node = configNode(job);
                nodeList.add(node);
            }
        }
    }

    private static ProcessNode configNode(JSONObject job) {
        ProcessNode node = new ProcessNode();
        node.setId(job.getString("@id"));
        node.setSourceRef(job.getString("@sourceRef"));
        node.setAnswer(job.getString("@answer"));
        node.setTargetRef(job.getString("@targetRef"));
        node.setDefaultRef(job.getString("@defaultRef"));
        node.setExceptionRef(job.getString("@exceptionRef"));
        node.setContent(job.getString("content"));

        return node;
    }

    private static ProcessNode getNodeByIdAndAnswer(String id, String answer) {
        if (StringUtils.isNullOrEmpry(id)) {
            return null;
        }

        if (nodeList == null || nodeList.isEmpty()) {
            return null;
        }

        //if (Integer.parseInt(id) == 0) { //第一次解析节点 直接将id为1的节点的内容返回
        for (ProcessNode processNode : nodeList) {

            if (Integer.parseInt(id) == 0 && "1".equals(processNode.getId())) {
                return processNode;
            } else if (id.equals(processNode.getId())) {
                String targets = processNode.getTargetRef();//找到当前节点的目标节点
                if (StringUtils.isNullOrEmpry(targets)) {//说明是最后一个节点
                    //TODO　　去最后一个节点内容
                    return getNodeById("5");
                } else {
                    String[] target = targets.split(",");
                    if (target.length == 1) {
                        return getNodeById(target[0]);
                    } else {
                        for (String pro_id : target) {//遍历下一个目标节点
                            ProcessNode processNode1 = getNodeById(pro_id);
                            if (!StringUtils.isNullOrEmpry(answer) && answer.equals(processNode1.getAnswer())) {
                                return processNode1;
                            }

                        }
                    }

                }
            }

        }
        // }

        return null;
    }


    public static void main(String[] args) {
        String init = "3,4";
        String[] target = init.split(",");
        logger.info("" + target);

    }

    /**
     * 根据id 获取节点的工具类
     */

    private static ProcessNode getNodeById(String id) {

        for (ProcessNode processNode : nodeList) {
            if (id.equals(processNode.getId())) {
                return processNode;
            }
        }

        return null;

    }


}
